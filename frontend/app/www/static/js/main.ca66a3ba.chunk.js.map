{"version":3,"sources":["Shared/Repository/WebRepository.ts","Shared/Repository/Repository.ts","token-validate.actions.ts","Pages/Login/login.reducer.ts","Pages/List/list.actions.ts","Pages/List/list.reducer.ts","Pages/AddNewPage/addnew.actions.ts","Pages/AddNewPage/addnew.reducer.ts","categories.actions.ts","categories.reducer.ts","Pages/Statistics/statistics.actions.ts","Pages/Statistics/statistics.reducer.ts","Models/new-record.ts","Pages/Login/Login.tsx","Pages/Login/login.action.ts","Pages/Home/Home.tsx","Menu/Menu.tsx","Header/Header.tsx","Shared/Autocomplete.tsx","Pages/AddNewPage/AddForm.tsx","Pages/AddNewPage/AddNewPage.tsx","Shared/DisplayDate.tsx","Shared/DisplayTime.tsx","Shared/DisplayDateTime.tsx","Pages/List/ItemList.tsx","Pages/List/ListPage.tsx","Pages/Statistics/StatisticsTable.tsx","Pages/Statistics/StatisticsChart.tsx","Pages/Statistics/StatisticsPage.tsx","Pages/Main.tsx","App.tsx","app.reducer.ts","serviceWorker.ts","index.tsx"],"names":["tokenStorageKey","WebRepository","Object","classCallCheck","this","api","axios","create","baseURL","headers","Content-Type","interceptors","request","use","config","concat","localStorage","getItem","createClass","key","value","user","post","then","response","status","data","token","record","get","setItem","removeItem","Repository","instance","buildInstance","ACTION_TOKEN_VALIDATE_SUCCESS","ACTION_TOKEN_VALIDATE_ERROR","ACTION_USER_INFO_SUCCESS","dispatchTokenFailed","error","type","loadUser","dispatch","storedToken","Instance","GetToken","GetUserInfo","userinfo","userInfo","catch","undefined","userReducer","state","action","SaveToken","objectSpread","isLoggedIn","ACTION_LOAD_LIST_START","ACTION_LOAD_LIST_SUCCESS","loadList","GetItems","json","list","listReducer","ACTION_ADD_NEW","ACTION_ADD_NEW_START","ACTION_ADD_NEW_SUCCESS","addNewRecord","AddItem","Name","name","Cost","cost","Type","CategoryId","categoryId","addnewReducer","addNew","ACTION_LOAD_CATEGORIES","ACTION_LOAD_CATEGORIES_SUCCESS","loadCategories","GetCategories","categories","dispatchLoadCategoriesSuccess","categoriesReducer","ACTION_LOAD_STATISTICS_START","ACTION_LOAD_STATISTICS_START_SUCCESS","loadStatistics","GetStatistics","statistics","dispatchStatisticsLoadSuccess","statisticsReducer","NewRecordType","useStyles","makeStyles","theme","@global","body","backgroundColor","palette","common","white","login","display","justifyContent","flexDirection","paper","avatar","margin","spacing","secondary","main","form","width","marginTop","submit","title","textAlign","connect","username","password","Login","UserName","Password","_ref","classes","_useState","useState","_useState2","slicedToArray","setUsername","_useState3","_useState4","setPassword","react_default","a","createElement","Container","component","maxWidth","className","Typography","variant","onSubmit","evt","preventDefault","TextField","required","fullWidth","id","label","autoComplete","autoFocus","onChange","target","Button","color","container","paddingTop","paddingBottom","store","userName","drawerPaper","position","whiteSpace","transition","transitions","easing","sharp","duration","enteringScreen","drawerPaperClose","defineProperty","overflowX","leavingScreen","breakpoints","up","toolbarIcon","alignItems","padding","mixins","toolbar","textDecoration","Menu","isOpen","onToggle","Drawer","clsx","open","IconButton","onClick","ChevronLeft_default","Divider","List","ListItem","button","Link","to","ListItemIcon","Home_default","ListItemText","primary","Add_default","List_default","PieChart_default","appBar","zIndex","drawer","appBarShift","marginLeft","paddingRight","menuButton","marginRight","menuButtonHidden","filler","flex","Header","onLogout","AppBar","Toolbar","edge","aria-label","Menu_default","noWrap","ExitToApp_default","left","right","chip","Autocomplete","props","downshift_esm","selection","onSelect","itemToString","item","getItemProps","getInputProps","openMenu","inputValue","assign","onFocus","Paper","square","getSuggestions","map","index","MenuItem","marginBottom","AddNewForm","setName","setCost","_useState5","_useState6","setCategoryId","Grid","xs","sm","Shared_Autocomplete","input","c","suggestion","model","Number","Spending","recordNew","withRouter","addNewState","init","onAddNew","history","initDone","setInit","useEffect","push","categoryList","AddForm","months","DisplayDate","date","dateObject","Date","formattedDate","getMonth","getDay","Fragment","DisplayTime","time","displayTime","getHours","toString","padStart","getMinutes","DisplayDateTime","dateTime","Shared_DisplayDate","Shared_DisplayTime","root","ItemList","items","Table","TableHead","TableRow","TableCell","TableBody","category","Shared_DisplayDateTime","content","loaded","setLoaded","CircularProgress","Fab","size","Refresh_default","List_ItemList","StatisticsTable","align","categoryStatistics","stat","totalAmount","StatisticsChart","d3","Statistics_StatisticsTable","Statistics_StatisticsChart","flexGrow","height","overflow","appBarSpacer","logout","RemoveToken","setOpen","handleMenuToggle","pages","react_router_dom","src_Header_Header","src_Menu_Menu","react_router","exact","path","Home","AddNewPage","ListPage","StatisticsPage","page","Pages_Login_Login","loader","CssBaseline","createStore","arguments","length","defaultListState","defaultAddnewState","defaultCategoriesState","defaultStatisticsState","applyMiddleware","thunk","createMuiTheme","grey","amber","typography","fontFamily","join","App","MuiThemeProvider","react_redux_es","Pages_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca66a3ba.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { IRepository } from './IRepository';\r\nimport { IRecord } from '../../Models/record';\r\nimport { LoginData } from '../../Pages/Login/login.action';\r\nimport { IStatistics } from '../../Models/statistics';\r\nimport { ICategory } from '../../Models/category';\r\n\r\nconst tokenStorageKey = 'auth_token';\r\n\r\nexport class WebRepository implements IRepository {\r\n    private api: AxiosInstance;\r\n\r\n    constructor() {\r\n        this.api = axios.create({\r\n            baseURL: `https://192.168.1.3:5001/api`,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n\r\n        this.api.interceptors.request.use(config => {\r\n            config.headers['Authorization'] = `Bearer ${localStorage.getItem(tokenStorageKey)}`\r\n            return config\r\n        });\r\n    }\r\n\r\n    Login(user: LoginData): Promise<string> {\r\n        return this.api.post('account/login', user)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.data.token;\r\n                }\r\n\r\n                throw response.status;\r\n            });\r\n    }\r\n\r\n    AddItem(record: any): Promise<any> {\r\n        return this.api.post('items', record)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return;\r\n                }\r\n\r\n                throw response.status;\r\n            });\r\n    }\r\n\r\n    GetItems(): Promise<IRecord[]> {\r\n        return this.api.get('items')\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.data;\r\n                }\r\n\r\n                throw response.status;\r\n            })\r\n\r\n    }\r\n\r\n    GetToken(): string | null {\r\n        return localStorage.getItem(tokenStorageKey);\r\n    }\r\n    SaveToken(token: string) {\r\n        localStorage.setItem(tokenStorageKey, token);\r\n    }\r\n    RemoveToken() {\r\n        localStorage.removeItem(tokenStorageKey);\r\n    }\r\n\r\n    GetUserInfo() {\r\n        return this.api.get('account/me')\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.data;\r\n                }\r\n\r\n                throw response.status;\r\n            })\r\n\r\n    }\r\n\r\n    GetCategories(): Promise<ICategory[]> {\r\n        return this.api.get('categories')\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.data;\r\n                }\r\n\r\n                throw response.status;\r\n            })\r\n    }\r\n\r\n    GetStatistics(): Promise<IStatistics> {\r\n        return this.api.get('statistics')\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.data;\r\n                }\r\n\r\n                throw response.status;\r\n            })\r\n    }\r\n}","import { IRepository } from \"./IRepository\";\r\nimport { WebRepository } from './WebRepository';\r\n\r\nexport class Repository{\r\n    private static instance: IRepository;\r\n\r\n    public static get Instance(): IRepository {\r\n        if(!this.instance){\r\n            this.buildInstance();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    private static buildInstance(){\r\n        this.instance = new WebRepository();\r\n    }\r\n}","import { Action } from \"redux\";\r\nimport { IUserInfo } from \"./app.reducer\";\r\nimport { Repository } from './Shared/Repository/Repository';\r\n\r\nexport const ACTION_TOKEN_VALIDATE_SUCCESS = 'TOKEN_VALIDATE_SUCCESS';\r\nexport const ACTION_TOKEN_VALIDATE_ERROR = 'TOKEN_VALIDATE_ERROR';\r\nexport const ACTION_USER_INFO_SUCCESS = 'USER_INFO_SUCCESS';\r\n\r\nexport interface IActionTokenValidateSuccess extends Action {\r\n    type: 'TOKEN_VALIDATE_SUCCESS',\r\n    token: string\r\n}\r\n\r\nexport interface IActionTokenValidateError extends Action {\r\n    type: 'TOKEN_VALIDATE_ERROR',\r\n    error?: string\r\n}\r\n\r\nexport interface IActionUserInfoSuccess extends Action {\r\n    type: 'USER_INFO_SUCCESS',\r\n    userInfo: IUserInfo\r\n}\r\n\r\n\r\nexport type tokenValidateActions = IActionTokenValidateSuccess | IActionTokenValidateError | IActionUserInfoSuccess;\r\n\r\nexport function dispatchTokenFailed(error?: string): IActionTokenValidateError {\r\n    return {\r\n        type: ACTION_TOKEN_VALIDATE_ERROR,\r\n        error\r\n    };\r\n}\r\n\r\nexport function dispatchTokenSuccess(token: string): IActionTokenValidateSuccess {\r\n    return {\r\n        type: ACTION_TOKEN_VALIDATE_SUCCESS,\r\n        token\r\n    };\r\n}\r\n\r\nfunction dispatchUserInfo(userInfo: IUserInfo): IActionUserInfoSuccess {\r\n    return {\r\n        type: ACTION_USER_INFO_SUCCESS,\r\n        userInfo\r\n    };\r\n}\r\n\r\nexport function loadUser() {\r\n    return (dispatch: any) => {\r\n        \r\n        const storedToken = Repository.Instance.GetToken();\r\n        if (storedToken) {\r\n            Repository.Instance.GetUserInfo()\r\n                .then((userinfo: IUserInfo) => {\r\n                    dispatch(dispatchTokenSuccess(storedToken));\r\n                    dispatch(dispatchUserInfo(userinfo));\r\n                })\r\n                .catch((error) => {\r\n                    dispatch(dispatchTokenFailed(error));\r\n                });\r\n        } else {\r\n            dispatch(dispatchTokenFailed(undefined));\r\n        }\r\n    };\r\n}","import { AppState, IUserData } from '../../app.reducer';\r\nimport { tokenValidateActions, ACTION_TOKEN_VALIDATE_ERROR } from '../../token-validate.actions';\r\nimport { ACTION_TOKEN_VALIDATE_SUCCESS, ACTION_USER_INFO_SUCCESS } from '../../token-validate.actions';\r\nimport { Repository } from '../../Shared/Repository/Repository';\r\n\r\nexport function userReducer(state: AppState, action: tokenValidateActions): IUserData {\r\n    switch (action.type) {\r\n        case ACTION_TOKEN_VALIDATE_SUCCESS:\r\n            Repository.Instance.SaveToken(action.token);\r\n\r\n            return {\r\n                ...state.user,\r\n                isLoggedIn: true,\r\n                error: undefined,\r\n            };\r\n        case ACTION_TOKEN_VALIDATE_ERROR:\r\n            return {\r\n                ...state.user,\r\n                isLoggedIn: false,\r\n                error: action.error,\r\n                userInfo: undefined\r\n            };\r\n        case ACTION_USER_INFO_SUCCESS:\r\n            return {\r\n                ...state.user,\r\n                userInfo: action.userInfo\r\n            };\r\n    }\r\n\r\n    return state.user;\r\n}\r\n\r\nexport function defaultUserState(): IUserData {\r\n    return {\r\n        isLoggedIn: 'loading',\r\n        error: undefined,\r\n        userInfo: undefined,\r\n    };\r\n}\r\n","import { Action } from \"redux\";\r\nimport { IRecord } from \"../../Models/record\";\r\nimport { Repository } from \"../../Shared/Repository/Repository\";\r\n\r\nexport const ACTION_LOAD_LIST_START = 'LIST_LOAD_START';\r\nexport const ACTION_LOAD_LIST_SUCCESS = 'LIST_LOAD_SUCCESS';\r\n\r\nexport interface IActionListLoadStart extends Action {\r\n    type: 'LIST_LOAD_START',\r\n}\r\n\r\nexport interface IActionListLoadSuccess extends Action {\r\n    type: 'LIST_LOAD_SUCCESS',\r\n    list: IRecord[]\r\n}\r\n\r\nexport type listAction = IActionListLoadStart | IActionListLoadSuccess;\r\n\r\nexport function dispatchListLoad(): IActionListLoadStart {\r\n    return {\r\n        type: ACTION_LOAD_LIST_START\r\n    };\r\n}\r\n\r\nexport function dispatchListSuccess(list: IRecord[]): IActionListLoadSuccess {\r\n    return {\r\n        type: ACTION_LOAD_LIST_SUCCESS,\r\n        list\r\n    };\r\n}\r\n\r\nexport function loadList() {\r\n    return (dispatch: any) => {\r\n        dispatch(dispatchListLoad());\r\n\r\n        Repository.Instance.GetItems()\r\n            .then((json: IRecord[]) => {\r\n                dispatch(dispatchListSuccess(json))\r\n            })\r\n            // .catch(() => {\r\n            //     dispatch(dispatchTokenFailed());\r\n            // });\r\n    }\r\n}","import { AppState } from \"../../app.reducer\";\r\nimport { IRecord } from \"../../Models/record\";\r\nimport { listAction, ACTION_LOAD_LIST_START, ACTION_LOAD_LIST_SUCCESS } from \"./list.actions\";\r\n\r\nexport function listReducer(state: AppState, action: listAction): Loading<IRecord[]> {\r\n    switch(action.type){\r\n        case ACTION_LOAD_LIST_START:\r\n            return \"loading\";\r\n        case ACTION_LOAD_LIST_SUCCESS:\r\n            return action.list\r\n    }\r\n\r\n    return state.list;\r\n}\r\n\r\nexport function defaultListState(): Loading<IRecord[]> {\r\n    return undefined;\r\n}","import { Action } from \"redux\";\r\nimport { INewRecord } from \"../../Models/new-record\";\r\nimport { Repository } from \"../../Shared/Repository/Repository\";\r\n\r\nexport const ACTION_ADD_NEW = 'ADD_NEW';\r\nexport const ACTION_ADD_NEW_START = 'ADD_NEW_START';\r\nexport const ACTION_ADD_NEW_SUCCESS = 'ADD_NEW_SUCCESS';\r\n\r\nexport interface IActionAddNew extends Action {\r\n    type: 'ADD_NEW',\r\n}\r\n\r\nexport interface IActionAddNewStart extends Action {\r\n    type: 'ADD_NEW_START',\r\n}\r\n\r\nexport interface IActionAddNewSuccess extends Action {\r\n    type: 'ADD_NEW_SUCCESS',\r\n}\r\n\r\nexport type addNewAction = IActionAddNew | IActionAddNewStart | IActionAddNewSuccess;\r\n\r\nexport function dispatchAddNew(): IActionAddNew {\r\n    return {\r\n        type: ACTION_ADD_NEW,\r\n    };\r\n}\r\n\r\nexport function dispatchAddNewStart(): IActionAddNewStart {\r\n    return {\r\n        type: ACTION_ADD_NEW_START,\r\n    };\r\n}\r\n\r\nexport function dispatchAddNewSuccess(): IActionAddNewSuccess {\r\n    return {\r\n        type: ACTION_ADD_NEW_SUCCESS,\r\n    };\r\n}\r\n\r\nexport function addNewRecord(record: INewRecord) {\r\n    return (dispatch: any) => {\r\n        dispatch(dispatchAddNewStart());\r\n\r\n        Repository.Instance.AddItem({\r\n            Name: record.name,\r\n            Cost: record.cost,\r\n            Type: record.type,\r\n            CategoryId: record.categoryId\r\n        })\r\n            .then(() => {\r\n                dispatch(dispatchAddNewSuccess());\r\n                // window.location.replace('/list');\r\n            })\r\n        // .catch(() => {\r\n        //     dispatch(dispatchTokenFailed());\r\n        // });\r\n    }\r\n}","import { AppState } from \"../../app.reducer\";\r\nimport { addNewAction, ACTION_ADD_NEW_START, ACTION_ADD_NEW_SUCCESS, ACTION_ADD_NEW } from \"./addnew.actions\";\r\n\r\nexport function addnewReducer(state: AppState, action: addNewAction): Loading<boolean> {\r\n    switch (action.type) {\r\n        case ACTION_ADD_NEW:\r\n            return undefined;\r\n        case ACTION_ADD_NEW_START:\r\n            return \"loading\";\r\n        case ACTION_ADD_NEW_SUCCESS:\r\n            return true;\r\n    }\r\n\r\n    return state.addNew;\r\n}\r\n\r\nexport function defaultAddnewState(): Loading<boolean> {\r\n    return undefined;\r\n}","import { Action } from \"redux\";\r\nimport { ICategory } from \"./Models/category\";\r\nimport { Repository } from \"./Shared/Repository/Repository\";\r\n\r\nexport const ACTION_LOAD_CATEGORIES = 'LOAD_CATEGORIES';\r\nexport const ACTION_LOAD_CATEGORIES_SUCCESS = 'LOAD_CATEGORIES_SUCCESS';\r\n\r\nexport interface IActionLoadCategoriesStart extends Action {\r\n    type: 'LOAD_CATEGORIES',\r\n}\r\n\r\nexport interface IActionLoadCategoriesSuccess extends Action {\r\n    type: 'LOAD_CATEGORIES_SUCCESS',\r\n    categories: ICategory[]\r\n}\r\n\r\nexport type categoriesAction = IActionLoadCategoriesStart | IActionLoadCategoriesSuccess;\r\n\r\nexport function dispatchLoadCategoriesStart(): IActionLoadCategoriesStart {\r\n    return {\r\n        type: ACTION_LOAD_CATEGORIES,\r\n    };\r\n}\r\n\r\nexport function dispatchLoadCategoriesSuccess(categories: ICategory[]): IActionLoadCategoriesSuccess {\r\n    return {\r\n        type: ACTION_LOAD_CATEGORIES_SUCCESS,\r\n        categories\r\n    };\r\n}\r\n\r\nexport function loadCategories() {\r\n    return (dispatch: any) => {\r\n        dispatch(dispatchLoadCategoriesStart());\r\n\r\n        Repository.Instance.GetCategories()\r\n            .then((categories: ICategory[]) => {\r\n                dispatch(dispatchLoadCategoriesSuccess(categories))\r\n            });\r\n        // .catch(() => {\r\n        //     dispatch(dispatchTokenFailed());\r\n        // });\r\n    }\r\n}","import { ICategory } from \"./Models/category\";\r\nimport { AppState } from \"./app.reducer\";\r\nimport { categoriesAction, ACTION_LOAD_CATEGORIES, ACTION_LOAD_CATEGORIES_SUCCESS } from \"./categories.actions\";\r\n\r\nexport function categoriesReducer(state: AppState, action: categoriesAction): Loading<ICategory[]> {\r\n    switch (action.type) {\r\n        case ACTION_LOAD_CATEGORIES:\r\n            return \"loading\";\r\n        case ACTION_LOAD_CATEGORIES_SUCCESS:\r\n            return action.categories\r\n    }\r\n\r\n    return state.categories;\r\n}\r\n\r\nexport function defaultCategoriesState(): Loading<ICategory[]> {\r\n    return undefined;\r\n}","import { Action } from \"redux\";\r\nimport { IStatistics } from \"../../Models/statistics\";\r\nimport { Repository } from \"../../Shared/Repository/Repository\";\r\n\r\nexport const ACTION_LOAD_STATISTICS_START = 'STATISTICS_LOAD_START';\r\nexport const ACTION_LOAD_STATISTICS_START_SUCCESS = 'STATISTICS_LOAD_SUCCESS';\r\n\r\nexport interface IActionStatisticsLoadStart extends Action {\r\n    type: 'STATISTICS_LOAD_START',\r\n}\r\n\r\nexport interface IActionStatisticsLoadSuccess extends Action {\r\n    type: 'STATISTICS_LOAD_SUCCESS',\r\n    statistics: IStatistics\r\n}\r\n\r\nexport type statisticsAction = IActionStatisticsLoadStart | IActionStatisticsLoadSuccess;\r\n\r\nexport function dispatchStatistiscLoad(): IActionStatisticsLoadStart {\r\n    return {\r\n        type: ACTION_LOAD_STATISTICS_START\r\n    };\r\n}\r\n\r\nexport function dispatchStatisticsLoadSuccess(statistics: IStatistics): IActionStatisticsLoadSuccess {\r\n    return {\r\n        type: ACTION_LOAD_STATISTICS_START_SUCCESS,\r\n        statistics\r\n    };\r\n}\r\n\r\nexport function loadStatistics() {\r\n    return (dispatch: any) => {\r\n        dispatch(dispatchStatistiscLoad());\r\n\r\n        Repository.Instance.GetStatistics()\r\n            .then((statistics: IStatistics) => {\r\n                dispatch(dispatchStatisticsLoadSuccess(statistics))\r\n            });\r\n            // .catch(() => {\r\n            //     dispatch(dispatchTokenFailed());\r\n            // });\r\n    }\r\n}","import { AppState } from \"../../app.reducer\";\r\nimport { statisticsAction, ACTION_LOAD_STATISTICS_START, ACTION_LOAD_STATISTICS_START_SUCCESS } from \"./statistics.actions\";\r\nimport { IStatistics } from \"../../Models/statistics\";\r\n\r\nexport function statisticsReducer(state: AppState, action: statisticsAction): Loading<IStatistics> {\r\n    switch(action.type){\r\n        case ACTION_LOAD_STATISTICS_START:\r\n            return \"loading\";\r\n        case ACTION_LOAD_STATISTICS_START_SUCCESS:\r\n            return action.statistics\r\n    }\r\n\r\n    return state.statistics;\r\n}\r\n\r\nexport function defaultStatisticsState(): Loading<IStatistics> {\r\n    return undefined;\r\n}","export enum NewRecordType {\r\n    Spending = 0,\r\n    Income = 1\r\n}\r\n\r\nexport interface INewRecord {\r\n    name: string;\r\n    cost: number;\r\n    type: NewRecordType;\r\n    categoryId?: number;\r\n}","import React, { useState, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from './login.action';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/styles/makeStyles/makeStyles';\r\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\r\nimport { Typography, TextField, Container } from '@material-ui/core';\r\n\r\ntype LoginProps = {\r\n    login(username: string, password: string): void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    login: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    paper: {\r\n\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    title:{\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst Login: React.FC<LoginProps> = ({ login }) => {\r\n    const classes = useStyles();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    function onLogin(evt: FormEvent) {\r\n        login(username, password);\r\n\r\n        evt.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\" className={classes.login}>\r\n            <div className={classes.paper}>\r\n                <Typography variant=\"h3\" className={classes.title}>\r\n                    Pénzkövető 2.0\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={onLogin}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"username\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        autoComplete=\"username\"\r\n                        autoFocus\r\n                        value={username} onChange={(evt) => setUsername(evt.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        value={password} onChange={(evt) => setPassword(evt.target.value)}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    login: (username: string, password: string) => {\r\n        dispatch(login(username, password))\r\n    }\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import { dispatchTokenFailed, loadUser } from \"../../token-validate.actions\";\r\nimport { Repository } from './../../Shared/Repository/Repository';\r\n\r\nexport interface LoginData {\r\n    UserName: string;\r\n    Password: string;\r\n}\r\n\r\nexport function login(username: string, password: string) {\r\n    return (dispatch: any) => {\r\n        Repository.Instance.Login({\r\n            UserName: username,\r\n            Password: password\r\n        })\r\n            .then((token: string) => {\r\n                Repository.Instance.SaveToken(token);\r\n                dispatch(loadUser());\r\n            })\r\n            .catch(() => {\r\n                dispatch(dispatchTokenFailed());\r\n            });\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return (dispatch: any) => {\r\n        Repository.Instance.RemoveToken();\r\n        dispatch(dispatchTokenFailed());\r\n    }\r\n}","import React from 'react';\r\nimport { Container, makeStyles, Theme, Typography } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../app.reducer';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n}));\r\n\r\ntype HomeProps = {\r\n    userName?: string;\r\n}\r\n\r\nconst HomePage: React.FC<HomeProps> = ({userName}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Typography variant=\"h1\">Hello {userName}!</Typography>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n        userName: store.user.userInfo && store.user.userInfo.userName\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(HomePage);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Theme, Drawer, IconButton, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\n\r\nexport const drawerWidth = 240;\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    list: {\r\n        textDecoration: 'none'\r\n    }\r\n}));\r\n\r\ntype MainProps = {\r\n    isOpen: boolean;\r\n    onToggle: () => void;\r\n}\r\n\r\nconst Menu: React.FC<MainProps> = ({ isOpen, onToggle }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: clsx(classes.drawerPaper, !isOpen && classes.drawerPaperClose),\r\n            }}\r\n            open={isOpen}\r\n        >\r\n            <div className={classes.toolbarIcon}>\r\n                <IconButton onClick={() => onToggle()}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List className={classes.list}>\r\n                <ListItem button component={Link} to=\"/\">\r\n                    <ListItemIcon>\r\n                        <HomeIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Home\" />\r\n                </ListItem>\r\n                <ListItem button component={Link} to=\"/add-new\">\r\n                    <ListItemIcon>\r\n                        <AddIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Record\" />\r\n                </ListItem>\r\n                <ListItem button component={Link} to=\"/list\">\r\n                    <ListItemIcon>\r\n                        <ListIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"List\" />\r\n                </ListItem>\r\n                <ListItem button component={Link} to=\"/statistics\">\r\n                    <ListItemIcon>\r\n                        <PieChartIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Statistics\" />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Theme, IconButton, AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport { drawerWidth } from '../Menu/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport LogoutIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    filler: {\r\n        flex: 1,\r\n    }\r\n}));\r\n\r\ntype HeaderProps = {\r\n    isOpen: boolean;\r\n    onToggle: () => void;\r\n    onLogout: () => void;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ isOpen, onToggle, onLogout }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, isOpen && classes.appBarShift)}>\r\n            <Toolbar className={classes.toolbar}>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    color=\"inherit\"\r\n                    aria-label=\"Open drawer\"\r\n                    onClick={() => onToggle()}\r\n                    className={clsx(classes.menuButton, isOpen && classes.menuButtonHidden)}>\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\r\n                    Pénzkövető 2.0\r\n                </Typography>\r\n                <div className={classes.filler}/>\r\n                <IconButton\r\n                    onClick={() => onLogout()}\r\n                    aria-label=\"Sign off\"\r\n                    title=\"Sign off\">\r\n                    <LogoutIcon />\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport Downshift from 'downshift';\r\nimport { TextField, makeStyles, Theme, Paper, MenuItem } from '@material-ui/core';\r\nimport { IAutocompleteSuggestion } from './Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        position: 'relative',\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing(1),\r\n        left: 0,\r\n        right: 0,\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(0.5, 0.25),\r\n    },\r\n}));\r\n\r\nexport interface IAutocompleteSuggestion {\r\n    label: string;\r\n    key: number;\r\n    value?: any;\r\n}\r\n\r\ntype AutocompleteProps = {\r\n    getSuggestions: (input: string | null) => IAutocompleteSuggestion[],\r\n    onSelect: (selection: IAutocompleteSuggestion)=>void ;\r\n}\r\n\r\nconst Autocomplete: React.FC<AutocompleteProps> = (props: AutocompleteProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Downshift\r\n            onChange={selection => props.onSelect(selection)}\r\n            itemToString={item => (item ? item.label : '')}\r\n        >\r\n            {({\r\n                getItemProps,\r\n                getInputProps,\r\n                isOpen,\r\n                openMenu,\r\n                inputValue\r\n            }) => (\r\n                    <div className={classes.container}>\r\n                        <TextField label=\"Category\" fullWidth {...getInputProps()} onFocus={() => openMenu()} onClick={() => openMenu()}></TextField>\r\n                        {\r\n                            isOpen ?\r\n                                <Paper className={classes.paper} square>{\r\n                                    props.getSuggestions(inputValue).map((item, index) => (\r\n                                        <MenuItem {...getItemProps({\r\n                                            key: item.key,\r\n                                            index,\r\n                                            item\r\n                                        })}>{item.label}</MenuItem>\r\n                                    ))\r\n                                }</Paper>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                )}\r\n        </Downshift>\r\n    );\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React, { useState } from 'react';\r\nimport { makeStyles, Theme, Typography, Paper, Grid, TextField, Button } from '@material-ui/core';\r\nimport Autocomplete, { IAutocompleteSuggestion } from './../../Shared/Autocomplete';\r\nimport { ICategory } from '../../Models/category';\r\nimport { INewRecord, NewRecordType } from '../../Models/new-record';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    paper: {\r\n        margin: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n}));\r\n\r\ntype AddNewFormProps = {\r\n    addNew(record: INewRecord): void;\r\n    categories: ICategory[];\r\n}\r\n\r\nconst AddNewForm: React.FC<AddNewFormProps> = ({ addNew, categories }) => {\r\n    const classes = useStyles();\r\n    const [name, setName] = useState('');\r\n    const [cost, setCost] = useState('');\r\n    const [categoryId, setCategoryId] = useState();\r\n\r\n    const recordNew = () => {\r\n        const model: INewRecord = {\r\n            name,\r\n            cost: Number(cost),\r\n            type: NewRecordType.Spending,\r\n            // date: new Date().toUTCString(),\r\n            categoryId,\r\n        };\r\n\r\n        addNew(model);\r\n    };\r\n\r\n    function getCategories(input: string | null): IAutocompleteSuggestion[] {\r\n        return (categories || []).map(c => ({\r\n            label: c.name,\r\n            key: c.id\r\n        }));\r\n    }\r\n\r\n    function updateCategoryId(suggestion: IAutocompleteSuggestion) {\r\n        setCategoryId(suggestion.key);\r\n    }\r\n\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Typography component=\"h1\" variant=\"h4\">\r\n                Record\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        required\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        label=\"Description\"\r\n                        fullWidth\r\n                        value={name}\r\n                        onChange={(evt: any) => { setName(evt.target.value) }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        required\r\n                        type=\"number\"\r\n                        id=\"cost\"\r\n                        name=\"cost\"\r\n                        label=\"Cost\"\r\n                        fullWidth\r\n                        value={cost}\r\n                        onChange={(evt: any) => { setCost(evt.target.value) }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Autocomplete\r\n                        // label=\"Category\"\r\n                        getSuggestions={getCategories}\r\n                        onSelect={updateCategoryId}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => recordNew()}>\r\n                        Record\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default AddNewForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../app.reducer';\r\nimport AddNewForm from './AddForm';\r\nimport { addNewRecord, dispatchAddNew } from './addnew.actions';\r\nimport { ICategory } from '../../Models/category';\r\nimport { loadCategories } from '../../categories.actions';\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { INewRecord } from '../../Models/new-record';\r\n\r\ntype AddNewPageProps = RouteComponentProps & {\r\n    init: () => void;\r\n    addNewState: Loading<boolean>,\r\n    onAddNew(record: INewRecord): void;\r\n    categories: Loading<ICategory[]>;\r\n}\r\n\r\nconst AddNewPage: React.FC<AddNewPageProps> = ({ init, addNewState, onAddNew, categories, history }) => {\r\n    const [initDone, setInit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!initDone) {\r\n            init();\r\n            setInit(true);\r\n            return;\r\n        }\r\n\r\n        if (addNewState === true) {\r\n            history.push('/list');\r\n        }\r\n    }, [initDone, addNewState, init, history]);\r\n\r\n    const categoryList = categories === 'loading' || categories === undefined ? [] : categories;\r\n\r\n    return (\r\n        <AddNewForm addNew={onAddNew} categories={categoryList}></AddNewForm>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n        addNewState: store.addNew,\r\n        categories: store.categories\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    init: () => {\r\n        dispatch(dispatchAddNew());\r\n        dispatch(loadCategories());\r\n    },\r\n    onAddNew: (record: INewRecord) => {\r\n        dispatch(addNewRecord(record));\r\n    },\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddNewPage));\r\n","import React from 'react';\r\n\r\ntype DateProps = {\r\n    date: string\r\n}\r\n\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nconst DisplayDate: React.FC<DateProps> = ({ date }) => {\r\n    const dateObject = new Date(date);\r\n    const formattedDate = `${(months[dateObject.getMonth() + 1])} ${dateObject.getDay() + 1}.`;\r\n\r\n    return (<>{formattedDate}</>);\r\n}\r\n\r\nexport default DisplayDate;\r\n","import React from 'react';\r\n\r\ntype TimeProps = {\r\n    time: string\r\n}\r\n\r\nconst DisplayTime: React.FC<TimeProps> = ({ time }) => {\r\n    const dateObject = new Date(time);\r\n\r\n    const displayTime = `${dateObject.getHours().toString().padStart(2, '0')}:${dateObject.getMinutes().toString().padStart(2, '0')}`;\r\n\r\n    return (<>{displayTime}</>);\r\n}\r\n\r\nexport default DisplayTime;\r\n","import React from 'react';\r\nimport DisplayDate from './DisplayDate';\r\nimport DisplayTime from './DisplayTime';\r\n\r\ntype DateTimeProps = {\r\n    dateTime: string\r\n}\r\n\r\nconst DisplayDateTime: React.FC<DateTimeProps> = ({ dateTime }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <DisplayDate date={dateTime}></DisplayDate> <DisplayTime time={dateTime}></DisplayTime> \r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DisplayDateTime;\r\n","import React from 'react';\r\nimport { makeStyles, Theme, Paper, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\nimport { IRecord } from '../../Models/record';\r\nimport DisplayDateTime from '../../Shared/DisplayDateTime';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: theme.spacing(3),\r\n        overflowX: 'auto',\r\n    },\r\n}));\r\n\r\ntype ItemsListProps = {\r\n    items: IRecord[]\r\n}\r\n\r\nconst ItemList: React.FC<ItemsListProps> = ({ items }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Id</TableCell>\r\n                        <TableCell>Type</TableCell>\r\n                        <TableCell>Category</TableCell>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Amount</TableCell>\r\n                        <TableCell>Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.map(item => (\r\n                        <TableRow key={item.id}>\r\n                            <TableCell component=\"th\">\r\n                                {item.id}\r\n                            </TableCell>\r\n                            <TableCell>{item.type}</TableCell>\r\n                            <TableCell>{item.category.name}</TableCell>\r\n                            <TableCell>{item.name}</TableCell>\r\n                            <TableCell>{item.cost}</TableCell>\r\n                            <TableCell><DisplayDateTime dateTime={item.date}/></TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default ItemList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container, makeStyles, Theme, Typography, CircularProgress, Fab } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../app.reducer';\r\nimport { IRecord } from '../../Models/record';\r\nimport { loadList } from './list.actions';\r\nimport ItemList from './ItemList';\r\n\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\n\r\ntype ListPageProps = {\r\n    items: Loading<IRecord[]>,\r\n\r\n    loadList(): void;\r\n}\r\n\r\nconst ListPage: React.FC<ListPageProps> = ({ items, loadList }) => {\r\n    const classes = useStyles();\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (loaded) {\r\n            return;\r\n        }\r\n\r\n        setLoaded(true);\r\n\r\n        if (items === 'loading') {\r\n            return;\r\n        }\r\n\r\n        loadList();\r\n    }, [loaded, items, loadList]);\r\n\r\n    let content;\r\n    if (items === \"loading\") {\r\n        content = <CircularProgress />\r\n    } else if (items !== undefined) {\r\n        content = (\r\n            <React.Fragment>\r\n                <Fab component={Link} to=\"/add-new\" color=\"primary\" size=\"small\" variant=\"extended\">\r\n                    <AddIcon /> ADD\r\n                </Fab>\r\n                <Fab color=\"secondary\" size=\"small\" variant=\"extended\" className={classes.margin} onClick={() => { loadList() }}>\r\n                    <RefreshIcon /> RELOAD\r\n                </Fab>\r\n                <ItemList items={items}></ItemList>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Typography variant=\"h3\">Recorded items</Typography>\r\n            {content}\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n        items: store.list\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    loadList: () => {\r\n        dispatch(loadList());\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPage);\r\n","import React from 'react';\r\nimport { makeStyles, Theme, Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid } from '@material-ui/core';\r\nimport { IStatistics } from '../../Models/statistics';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: theme.spacing(3),\r\n        overflowX: 'auto',\r\n    },\r\n}));\r\n\r\ntype StatisticsTableProps = {\r\n    statistics: IStatistics\r\n}\r\n\r\nconst StatisticsTable: React.FC<StatisticsTableProps> = ({ statistics }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6}>\r\n            <Paper className={classes.root}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Category</TableCell>\r\n                            <TableCell align=\"right\">Total amount</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {statistics.categoryStatistics.map(stat => (\r\n                            <TableRow key={stat.category ? stat.category.id : -1}>\r\n                                <TableCell component=\"th\">\r\n                                    {stat.category ? stat.category.name : 'Uncategorized'}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{stat.totalAmount}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StatisticsTable;\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles, Theme, Paper, Grid } from '@material-ui/core';\r\nimport { IStatistics } from '../../Models/statistics';\r\nimport * as d3 from \"d3\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: theme.spacing(3),\r\n        overflowX: 'auto',\r\n    },\r\n}));\r\n\r\ntype StatisticsChartProps = {\r\n    statistics: IStatistics\r\n}\r\n\r\nconst StatisticsChart: React.FC<StatisticsChartProps> = ({ statistics }) => {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const chart = d3.select('#stat-chart');\r\n\r\n        const pie = d3.pie()\r\n        //     .value(d => d.value)\r\n        // var data_ready = pie(d3.entries(data))\r\n    });\r\n\r\n    const data = { a: 9, b: 20, c: 30, d: 8, e: 12 }\r\n\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6}>\r\n            <Paper className={classes.root}>\r\n                <svg id=\"stat-chart\" className=\"container\"></svg>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StatisticsChart;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../app.reducer';\r\nimport { Container, Typography, makeStyles, Theme, CircularProgress, Grid } from '@material-ui/core';\r\nimport { loadStatistics } from './statistics.actions';\r\nimport StatisticsTable from './StatisticsTable';\r\nimport StatisticsChart from './StatisticsChart';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    }\r\n}));\r\n\r\ntype StatisticsPageProps = {\r\n    statistics: Loading<any>;\r\n    loadStatistics: () => void;\r\n}\r\n\r\nconst StatisticsPage: React.FC<StatisticsPageProps> = ({ statistics, loadStatistics }) => {\r\n    const classes = useStyles();\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (loaded) {\r\n            return;\r\n        }\r\n\r\n        setLoaded(true);\r\n\r\n        if (statistics === 'loading') {\r\n            return;\r\n        }\r\n\r\n        loadStatistics();\r\n    }, [loaded, statistics, loadStatistics]);\r\n\r\n    let content;\r\n    if (statistics === \"loading\") {\r\n        content = <CircularProgress />\r\n    } else if (statistics !== undefined) {\r\n        content = (\r\n            <Grid container spacing={3}>\r\n                <StatisticsTable statistics={statistics}></StatisticsTable>\r\n                <StatisticsChart statistics={statistics}></StatisticsChart>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Typography variant=\"h3\">Statistics</Typography>\r\n            {content}\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n        statistics: store.statistics\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    loadStatistics: () => {\r\n        dispatch(loadStatistics());\r\n    }\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatisticsPage);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport { AppState } from '../app.reducer';\r\nimport Login from './Login/Login';\r\nimport Home from './Home/Home';\r\nimport { CssBaseline, makeStyles, Theme } from '@material-ui/core';\r\n\r\nimport Menu from '../Menu/Menu';\r\nimport Header from '../Header/Header';\r\nimport { logout } from './Login/login.action';\r\nimport AddNewPage from './AddNewPage/AddNewPage';\r\nimport ListPage from './List/ListPage';\r\nimport StatisticsPage from './Statistics/StatisticsPage';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n}));\r\n\r\ntype MainProps = {\r\n    isLoggedIn: Loading<boolean>,\r\n    logout(): void\r\n}\r\n\r\nconst Main: React.FC<MainProps> = ({ isLoggedIn, logout }) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const handleMenuToggle = () => {\r\n        setOpen(!isOpen);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    const pages = (\r\n        <BrowserRouter>\r\n            <Header isOpen={isOpen} onToggle={handleMenuToggle} onLogout={logout}></Header>\r\n            <Menu isOpen={isOpen} onToggle={handleMenuToggle}></Menu>\r\n            <div className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n\r\n                <Route exact path=\"/\" component={isLoggedIn === true ? Home : Login} />\r\n                <Route path=\"/add-new\" component={AddNewPage} />\r\n                <Route path=\"/list\" component={ListPage} />\r\n                <Route path=\"/statistics\" component={StatisticsPage} />\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n\r\n    const page = (\r\n        <React.Fragment>\r\n            {isLoggedIn ? pages : <Login></Login>}\r\n        </React.Fragment>\r\n    );\r\n\r\n    const loader = (\r\n        <p>Loading...</p>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            {isLoggedIn === 'loading' ? loader : page}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n        isLoggedIn: store.user.isLoggedIn\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    logout: () => {\r\n        dispatch(logout());\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { appReducer, defaultState } from './app.reducer';\nimport { Provider } from 'react-redux';\nimport Main from './Pages/Main';\nimport { loadUser } from './token-validate.actions';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { grey, amber } from '@material-ui/core/colors'\n\nconst store = createStore(appReducer, defaultState(), applyMiddleware(thunk));\nstore.dispatch(loadUser() as any);\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: grey[800]\n    },\n    primary: {\n      main: amber[500]\n    }\n  },\n  typography: {\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '\"Lato\"',\n      'sans-serif'\n    ].join(',')\n  }\n});\n\nconst App: React.FC = () => {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Provider store={store}>\n        <Main />\n      </Provider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { Action } from \"redux\";\r\nimport { userReducer, defaultUserState } from \"./Pages/Login/login.reducer\";\r\nimport { IRecord } from \"./Models/record\";\r\nimport { listReducer, defaultListState } from \"./Pages/List/list.reducer\";\r\nimport { addnewReducer, defaultAddnewState } from \"./Pages/AddNewPage/addnew.reducer\";\r\nimport { ICategory } from \"./Models/category\";\r\nimport { categoriesReducer, defaultCategoriesState } from \"./categories.reducer\";\r\nimport { IStatistics } from \"./Models/statistics\";\r\nimport { statisticsReducer, defaultStatisticsState } from \"./Pages/Statistics/statistics.reducer\";\r\n\r\nexport interface IUserInfo{\r\n    id: string;\r\n    userName: string;\r\n}\r\n\r\nexport interface IUserData {\r\n    userInfo?: IUserInfo;\r\n    isLoggedIn: Loading<boolean>;\r\n    error?: string;\r\n}\r\n\r\nexport interface AppState {\r\n    user: IUserData;\r\n    list: Loading<IRecord[]>;\r\n    addNew: Loading<boolean>;\r\n    categories: Loading<ICategory[]>;\r\n    statistics: Loading<IStatistics>;\r\n}\r\n\r\nexport function appReducer(state: AppState = defaultState(), action: Action) {\r\n    return {\r\n        user: userReducer(state, action),\r\n        list: listReducer(state, action),\r\n        addNew: addnewReducer(state, action),\r\n        categories: categoriesReducer(state, action),\r\n        statistics: statisticsReducer(state, action),\r\n    };\r\n}\r\n\r\nexport function defaultState(): AppState {\r\n    return {\r\n        user: defaultUserState(),\r\n        list: defaultListState(),\r\n        addNew: defaultAddnewState(),\r\n        categories: defaultCategoriesState(),\r\n        statistics: defaultStatisticsState(),\r\n    };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}